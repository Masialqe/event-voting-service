@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using EVS.App.Application.UseCases.Voters.CreateUser
@using EVS.App.Application.UseCases.Voters.CreateVoter

@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject CreateVoterHandler CreateVoterHandler

<PageTitle>Register</PageTitle>

<h1>Register</h1>

<div class="row">
    <div class="col-md-4">
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator/>
            <h2>Create a new account.</h2>
            <hr/>
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com"/>
                <label for="email">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger"/>
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Username" class="form-control" autocomplete="username" aria-required="true" placeholder="Username"/>
                <label for="email">Username</label>
                <ValidationMessage For="() => Input.Username" class="text-danger"/>
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password"/>
                <label for="password">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger"/>
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password"/>
                <label for="confirm-password">Confirm Password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger"/>
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
        </EditForm>
    </div>
    <div class="col-md-6 col-md-offset-2">
        <section>
            <h3>Use another service to register.</h3>
            <hr/>
            <ExternalLoginPicker/>
        </section>
    </div>
</div>

@if (!string.IsNullOrEmpty(message))
{
    <p>@message</p>
}

@code {
    
    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    private string? message = string.Empty;

    public async Task RegisterUser(EditContext editContext)
    {
        var confirmationUrl = NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri;
        var request = new CreateVoterRequest(Input.Username, Input.Email, Input.Password, confirmationUrl);
        
        var result = await CreateVoterHandler.Handle(request);
        
        //TODO: Handle failure
        if (result.IsFailure)
            message = result.Error.errorDescription;
        
        if (result.IsSuccess)
        {
             RedirectManager.RedirectTo(
                 "Account/RegisterConfirmation",
                 new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }
    }
    
    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
        
        [Required]
        [Display(Name = "Username")]
        [StringLength(50, ErrorMessage = "Username can have max 50 characters.")]
        public string Username { get; set; } = String.Empty;
    }

}