@page "/event/{id}"
@using EVS.App.Application.UseCases.Events.GetEventById
@using EVS.App.Domain.Events
@using Microsoft.AspNetCore.SignalR.Client

@inject GetEventByIdHandler GetEventByIdHandler

@implements IAsyncDisposable

    <div class="container-fluid shadow h-100">
        @if (_eventData is not null)
        {
            <div class="d-flex flex-column align-items-center h-100">
                <div class="flex-grow-0 d-flex flex-column align-items-center w-100">
                    <h1>"@_eventData.Name"</h1>
                    <p> <i>@_eventData.Description</i></p>
                </div>
                
                <p>@_eventData.VoterEvents.Count</p>
                
                @if (_eventData.VoterEvents.Count > 0)
                {
                    @foreach (var voter in _eventData.VoterEvents)
                    {
                        <p>@voter.Voter?.Username - @voter.HasVoted </p> 
                    }
                }
            </div>
        }
    </div>

@code {
    private HubConnection?_hubConnection = default;
    private Event? _eventData = default;
    
    [Parameter] public string Id { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var request = new GetEventByIdRequest(Id);
        var result = await GetEventByIdHandler.Handle(request);

        if (result.IsSuccess)
            _eventData = result.Value;
    }


    public async ValueTask DisposeAsync()
    {
        if(_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }

}