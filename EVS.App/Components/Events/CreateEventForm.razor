@using System.ComponentModel.DataAnnotations
@using EVS.App.Application.UseCases.Events.CreateEvent

@inject CreateEventHandler CreateEventHandler

<EditForm Model="Input" FormName="AddEventForm" OnValidSubmit="HandleFormSubmit">
    <DataAnnotationsValidator/>
    <div class="mb-3">
        <InputText
            class="form-control"
            @bind-Value="@Input.Name"
            placeholder="Enter event name..."
        />
        <ValidationMessage For="@(() => Input.Name)" />
    </div>
    <div class="mb-3">
        <InputText class="form-control"
                   @bind-Value="@Input.Description"
                   placeholder="Enter event description..."
        />
        <ValidationMessage For="@(() => Input.Description)" />
    </div>
    <div class="mb-3 d-flex justify-content-center">
        <button type="submit"
                class="btn btn-primary">
            + Add
        </button>
    </div>
</EditForm>

@code {
    
    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();
    
    private sealed class InputModel
    {
        [Required] [MinLength(5)] public string Name { get; set; } = string.Empty;
        [Required] [MinLength(10)] public string Description { get; set; } = string.Empty;
    }

    private async Task HandleFormSubmit()
    {
        var request = CreateEventRequest.Create(Input.Name, Input.Description);
        var result = await CreateEventHandler.Handle(request);

        if (result.IsSuccess)
            Input = new();
    }

}