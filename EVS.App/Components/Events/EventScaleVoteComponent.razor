@using EVS.App.Application.UseCases.Voters.GetVoter
@using EVS.App.Application.UseCases.Voters.SetVoterScore
@using EVS.App.Domain.VoterEvents
@using EVS.App.Domain.Voters

@inject SetVotersScoresHandler SetVotersScoresHandler
@inject GetLoggedVoterHandler GetLoggedVoterHandler

<div>
    @if (Voters is { Count: > 0 } && _currentLoggedVoter is not null)
    {
        <table class="table">
            <thead>
            <tr>
                <th> Username </th>
                <th> Points </th>
            </tr>
            </thead>
            <tbody>
            @foreach (var voter in Voters)
            {
                if (voter.Id == _currentLoggedVoter.Id)
                    continue;
                <tr @key="voter.Id">
                    <td>@voter.VoterName</td>
                    <td>
                        <div>
                            <input type="range"
                                   class="form-range"
                                   id="checkbox_@voter.Id"
                                   @bind="_votesAsDict[voter.Id]"
                                   min="0"
                                   max="10"/>
                            <label for="checkbox_@voter.Id">Add points</label>
                        </div>
                    </td>
                </tr>
            }
            </tbody>

        </table>
    }
</div>

@code {
    [Parameter] public Guid EventId { get; set; }
    [Parameter] public ICollection<VoterEvent>? Voters { get; set; }
    
    private Voter? _currentLoggedVoter;
    private Dictionary<Guid, int> _votesAsDict = new();
    
    protected override async Task OnInitializedAsync()
    {
        if (Voters is { Count: > 0 })
            _votesAsDict = Voters.ToDictionary(voter => voter.Id, voter => 0);

        var currentLoggedUserResult = await GetLoggedVoterHandler.Handle();

        if (currentLoggedUserResult.IsSuccess)
            _currentLoggedVoter = currentLoggedUserResult.Value;
    }
    
    private async Task HandleScoreSubmit()
    {
        var resultArray = _votesAsDict
            .Select(x =>
                SaveVoterScoreRequest.Create(x.Key, x.Value)).ToArray();

        var result = await SetVotersScoresHandler.Handle(SetVotersScoresRequest.Create(
            resultArray, EventId, _currentLoggedVoter.Id));

        //Handle informations about result
    }
}